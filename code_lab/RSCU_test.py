from collections import Counter

def calculate_codons(secuencia):
    return [secuencia[i:i+3] for i in range(0, len(secuencia), 3)]

def calcular_RSCU(secuencia, genetic_code:dict[str, str]):
    codones = [secuencia[i:i+3] for i in range(0, len(secuencia), 3)]

    # Contar las frecuencias de cada codón
    frecuencias = Counter(codones)

    # Calcular RSCU para cada codón
    rscu = {}
    for codon, freq_obs in frecuencias.items():
        aa = genetic_code.get(codon, 'Unknown')
        if aa != 'Unknown':
            synonymous_codons = [c for c in frecuencias if aminoacidos.get(c, 'Unknown') == aa]
            n_i = len(synonymous_codons)
            rscu[codon] = freq_obs / (1/n_i * sum(frecuencias[c] for c in synonymous_codons))
        else:
            print(f"Warning: Unknown codon '{codon}' found.")

    return rscu

aminoacidos = {
    'TTT': 'F', 'TTC': 'F', 'TTA': 'L', 'TTG': 'L',
    'TCT': 'S', 'TCC': 'S', 'TCA': 'S', 'TCG': 'S',
    'TAT': 'Y', 'TAC': 'Y', 'TAA': '*', 'TAG': '*',
    'TGT': 'C', 'TGC': 'C', 'TGA': '*', 'TGG': 'W',
    'CTT': 'L', 'CTC': 'L', 'CTA': 'L', 'CTG': 'L',
    'CCT': 'P', 'CCC': 'P', 'CCA': 'P', 'CCG': 'P',
    'CAT': 'H', 'CAC': 'H', 'CAA': 'Q', 'CAG': 'Q',
    'CGT': 'R', 'CGC': 'R', 'CGA': 'R', 'CGG': 'R',
    'ATT': 'I', 'ATC': 'I', 'ATA': 'I', 'ATG': 'M',
    'ACT': 'T', 'ACC': 'T', 'ACA': 'T', 'ACG': 'T',
    'AAT': 'N', 'AAC': 'N', 'AAA': 'K', 'AAG': 'K',
    'AGT': 'S', 'AGC': 'S', 'AGA': 'R', 'AGG': 'R',
    'GTT': 'V', 'GTC': 'V', 'GTA': 'V', 'GTG': 'V',
    'GCT': 'A', 'GCC': 'A', 'GCA': 'A', 'GCG': 'A',
    'GAT': 'D', 'GAC': 'D', 'GAA': 'E', 'GAG': 'E',
    'GGT': 'G', 'GGC': 'G', 'GGA': 'G', 'GGG': 'G'
}

seq = "TTCAAGCCCCCCGTAGTCAAGTTCGCCACACGCATCTACCACCCCAATGTCACAAACGACTCGCTCGGCAACATCTGCCTCGGCCTGCTCAAGCCAGACGCCTGGAAGCCCAGCACCAAGCTTCGTGCCGTTCTAGATGCCCTTCGCAACCTCCTCGAGGAGCCTCAGCTCGATAGCCCCCTCGAGGAGCGCATCGCTCATCAGTACCAGACCGACAGGGAAGAGTTCGACAAGACGGCCAAGCAGCACGTCGAGAGATATGCCATGGGGGAGCCCATTTTTCCACCCGTTGTCTAA"
seq2 = "ATGGCACCCCTCGCCATATCTGTCCCCGACGCCCCGGGTTCCCCAAATGCGACCCGTCAGAAATTCTCTCCCTACGGAAGCCGATTACGAGATAGCGACAATAGCCATACACCGGCAGCTTCAACTAGTGATGCATCGCCGTATGCCTCGCCGTTGACTTCGCCTCTGGGATCGCCGCTTGCATCGCCCCGCGTGCATATCGTGCCGTTCGGCCAAGCATACCGACATGCTCGTGAACCGTCAGACGAAGACCTCTCACAACTGCCGCCGTTGCCCATGTCACCACGATGGGATTCAATGTCAAACCCTTCTAAATTTATCCTGCAGCCTGCAGCCTCCGCCCCAGCCTCGCCCTTCGAGCCTCCGCCCCATTCACCCTCACCATTTGCATACGATACAGCTGCGAGTACGCCTGTCGATTCCCGAAACGTCTCTCCGACATTCCCTCTGGCATCCAAATCGTCCCTGGCCGATCTGCGCGCCTACGACAACCCTCCAACCGCCGTGGAGAACTTCTCGCGGCCGCGGAAGCAGAGCATCCGCCAACCAATCACAGACGCGGCTAAGCCCCGGGCCGCCCCCAGCGCCCCAAGCGCAGGTGCCCCCGGCCTCAATCCCGCCGAGCAGTACCTCGAGCTCGTTAACACTCCTCAACATCCCCTTTGGCCTCCTACACGTCCCCGCGGTCCTTCTGTCTCTTCCTGTCAGTCATCGTCTACTTACCATTCGGTCCTTTCGCCTGCCAACAATTCCAACGACTTTTATGAGCCGCGACCGCCTCGTGCTAGGGCCACCAATGGTGCGACATCATCTGCCGCACGGCCGCCCTTGAGCTACACCAGCGGCGGCTCGGCTTCCCCGAGCCCTGTTGCTGCCCCTTGGATGAGTGGTGAAGAACTTCGTTCAAGCTTCCGTTCACAATTCACCGAGTCAACAGCTCCCGGCACAGCTGTTACAGAGCGAAGCAGCGTTCTTACAAAAGACAGCTCCGTCACTTCACTGTACCCCAGCCCAGAGGGTGACGCGGAGCCCGAAGCTGGCGCCGACAACGAGCTCGACCCCGACCTCGACGAACCGAGCTTGGAGGATCTTATGGGCATGTACGAGCAAGGTTTCGACGACGACGAGAACGACAACTACTCAGACTACAACAAAACTGTAAACGCTCGACACAATTCCTCGACATCCGACATGCAACAGCCACGTCAGAGCATCATTGATGCCGATGACGACGAGGACTTTCCTCAGCGCCCGATGCCAGAATCTGTCTCGACCTTGGACGTCGAGATCCGAATGTCCAAGATGATCTTTTCCCATCCCGCCTTTACCTCCTCCGTTGGCCATATTGCCGAGAACTATGGTCGCGGAATGTCTGAAAAGCGCGATTCAGCCAAGTCTCTGGACTCCGAGCCCTCCATCAATTCACAACAACCACCCTCCGCTACCGAACCTACTCCTACACGCTCGCCATCCATTTCAACACCAATTTCGCCGCCCATCTCACCACACATCCCGGGTCCTGAGGCCACCGAGCGCCCCGACACCCCTGAATCTAAACAAGAAAAACCCGAACCCGTACCTGAACCCCCTGTCATCACCCTTTCAACTCCACCCGCCGAACCCGAGGATCCCGAGTCCCGTGACCGATATGGCTTCAAGAAGCAGAACCAGTATGTGACGCGGGAGCAATACGACAACTGGAATGCTGGTTATACCGAGTACCTGGCCCGCCGGCGGAAGAAGTGGACCGCATACCTGAAGGATAATGCTCTCATGACGGAGGATCCCAACCGATTTCCCGCACCGAATGCAAAGACCAAGCGCTTTGTTCGCAAGGGCATTCCTCCGGAATGGCGCGGTGCGGCTTGGTTCTATTATGCTGGTGGACCAGCCATCCTCGCCCAGCACTCGGGCCTCTACGACAAGCTGACCTTCAAGCAACCCAAGGATGTTGATGTCGAGGCCATCGAGCGGGACCTTCACCGTACATTCCCCGACAACATTAGTTTCAAGCCTCCCGGTGGACTGCAGACGGCGTCAAGCAGCGCTAGGCAGAGCCAAACGACTATGACGGATTCAACTCGTAGCTCAAGCCCAGCGCCACACAGCACTGAGGCGGAGCCCCCTATGATCACATCGCTGAGGCGGGTGCTTCACGCCTTTGCCGTGTACAACCCGTTAATCGGCTACTGCCAGAGCTTAAACTTTCTGGCTGGTCTCTTGCTCCTCTTTGTCAAGACGGAGGAACAGTGCTTCTGGCTGCTAAATGTCATTACACGCATTTACCTGCCAGGGACGCACGAGATGAGTCTAGAGGGCTCCAAAATCGATCTTGGGGTTCTCATGAACGAGATGCGTTCTTCTCTACCTTCCGTCTGGGACAAGATTGGTGGAGAGCTTGAGGCAGAACCCAACTCACGACCGTCGACGAGCAAGTCAATTCGACTAACTCGGGCCCGACGCAAGGAACTAGCTCGCATGTCAACGCCAACTGACCGACTTCCACCGATTACGCTCTGCATGACGCCATGGTTCATGAGCTGTTTTATCGGGACTCTCCCGATCGAGACAACACTACGAGTGTGGGATGTCTTTTTCTACGAGGGTTCCAAGACCCTATTCCGCATTGCTTTGGCCATCTTCAAGCAGGGTGAGAATGAAATCAGGTCTGTCGCAGACCCCATGGAGATGTTTGGTGTTGTTCAATCAATGCCAAGGCGACTGATTGACGCCAACGCGCTGATGGAGGCTTGCTTCAAGCGGCGGAATGGCTTCGGGCACCTGAGCCAAGTCCAGATCGACGAGAAGCGCCAGGAACGCCGAGCCAAGGCACAGTTGGATAGAGTCCGACAGGGCAAGAGTCTCAACACGTGGAACGTGGCGCAGTCAGAAACCGAGGGTAGCGGCAAGAAGTCTATCTTTGGGAAGAAGCCGTCTCCGACTGCTGCATGA"


print(calcular_RSCU(seq2, aminoacidos))

